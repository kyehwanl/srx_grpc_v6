

Debigging Errors
=================


1. libgrpc_service.so.0: undefined symbol

  (1) Server side,  when running CImple_srx_grpc_server

  using srxapi_server library from C
  ./CImple_srx_grpc_server: symbol lookup error: /root/go/src/srx_grpc/srx/src/.libs/libgrpc_service.so.0: undefined symbol: logTimeStamp
  Press return ...


  (2) client side, when running CImple_srx_grpc_client

  [CImple_srx_grpc_client.c] Running C imple grpc client from C
  size: 15
  init result: 1
  panic: runtime error: invalid memory address or nil pointer dereference
  [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x7f8c8df205df]

  goroutine 17 [running, locked to thread]:
  main.RunProxyHello(0x7ffe5dedd970, 0x14, 0x14, 0x0, 0xc000000000)
          /root/go/src/srx_grpc/client/srx_grpc_client.go:206 +0xaff
  main._cgoexpwrap_485132ae5f2b_RunProxyHello(0x7ffe5dedd970, 0x14, 0x14, 0x0, 0x7ffe00000000)
          _cgo_gotypes.go:259 +0xb9
  /bin/bash: line 1:    84 Aborted                 ./CImple_srx_grpc_client
  Press return ...


 
 (3) Solution
 
  - In case CImple_srx_grpc_server.c compile, 
  In /opt/project/gobgp_test/gowork/src/srx_grpc/srx/src/server/making_grpc_service_lib.txt, 
    add -DHAVE_CONFIG_H switch into compile script like,
     gcc "-DHAVE_CONFIG_H" ...<snip> 
     

  - Otherwise, find logTimeStamp symbol (T not, U), and incldue them in compilation time





2. Server side, running only srx_grpc_server(.go)

  (1) error
    ./srx_grpc_server: symbol lookup error: /opt/project/gobgp_test/gowork/src/srx_grpc_v6/srx-server//src//.libs
      /libgrpc_service.so.0: undefined symbol: setLogLevel


  (2) Solutions
    (Sol.1) 
      in source code, specify LDFLAGS and object
      #cgo LDFLAGS: /opt/project/gobgp_test/gowork/src/srx_grpc_v6/srx-server/src/.libs/log.o

    (Sol.2)
      Use LD_PRELOAD to load libSRxProxy.so
      LD_PRELOAD=/opt/project/gobgp_test/gowork/src/srx_grpc_v6/srx-server/src/.libs/libSRxProxy.so ./srx_grpc_server

      -(cf)- running srx_server will be fine, because srx_server already includes libraries needs to run all







3. jobDone channel in stream receive function in grpc client

(1) in /opt/project/gobgp_test/gowork/src/srx_grpc/client/srx_grpc_client.go,

  in ProxyVerify function, there is jobDone channel in go subroutine, like following
    go func(stream pb.SRxApi_ProxyVerifyStreamClient, jobDone chan bool, workerId int32) {}

   이방식을 이용하면 저번의 고질적인 context가 없어지지 않았던? 버그가 고쳐지지 않을까??

    Shouldn't it(jobdone) be used with "defer close(jobDone)" when returning the function, 
    instead of using just close(jobDone) 
    Confer to the following go code with +,- diffe codes


    <---------- go code start --------------------------------------------->
        + defer close(jobDone)

        if resp.Type == 0 && resp.Length == 0 {                                                        
            _, _, line, _ := runtime.Caller(0)                                                         
            log.Printf("[WorkerID: %d] [client line:%d] close stream \n", workerId, line+1)            
         -  close(jobDone)                                                                             
         +  return
        } else {                                                                                       
                                                                                                       
            go_vn := &Go_ProxyVerifyNotify{                                                            
                _type:         uint8(resp.Type),                                                       
                _resultType:   uint8(resp.ResultType),                                                 
                _roaResult:    uint8(resp.RoaResult),                                                  
                _bgpsecResult: uint8(resp.BgpsecResult),                                               
                _length:       resp.Length,                                                            
                _requestToken: resp.RequestToken,                                                      
                _updateID:     resp.UpdateID,                                                          
            }                                                                                          
            vn := (*C.SRXPROXY_VERIFY_NOTIFICATION)(C.malloc(C.sizeof_SRXPROXY_VERIFY_NOTIFICATION))   
            defer C.free(unsafe.Pointer(vn))                                                           
            go_vn.Pack(unsafe.Pointer(vn))                                                             
            //log.Printf("[WorkerID: %d] vn: %#v\n", workerId, vn)                                     
                                                                                                       
            // to avoid runtime: address space conflict:                                               
            //          and fatal error: runtime: address space conflict                               
            //      NEED to make a shared library at the client side same way at server side           
            C.processVerifyNotify_grpc(vn)                                                             
                                                                                                       
            // signal when the notification is over from SRx server                                    
            // TODO: need to consider to have a flag that indicates ROA validation result was received 
            if resp.Type == 0x06 && resp.ResultType == 0x02 && resp.RequestToken == 0x0 {              
             -  close(jobDone)                                                                         
             +  return
            }                                                                                          
        } 

    <---------- go code end --------------------------------------------->





4. Development with SyncRequest

(1) Hello Response후에 SyncRequest를 server가 하게 되는데, 
  이때 sync request를 서버에서 클라이언트에게 보내게 되는데,  
  전제 조건중에 client에서 처음에 불려졌어야 될 RunProxyStream()이 불려지지 않았다
  그래서 deadlock상태가 지속된다


  grpc context는 goroutine이나 thread로 병렬로 호출할수 없는가?












